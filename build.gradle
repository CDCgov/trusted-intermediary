/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    id 'groovy'
    id 'java'
    id 'jacoco'
    id 'jacoco-report-aggregation'
    id 'com.diffplug.spotless' version '7.0.2'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.cyclonedx.bom' version '1.10.0'
    id 'org.sonarqube' version '6.0.1.5171'
}

dependencies {
    jacocoAggregation project(':app')
    jacocoAggregation project(':shared')
    jacocoAggregation project(':etor')
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'org.sonarqube'
    apply plugin: 'jacoco'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'org.cyclonedx.bom'

    cyclonedxBom {

        // Specified the type of project being built. Defaults to 'library'
        projectType = "application"

        // Boms destination directory (defaults to build/reports)

        // The file name for the generated BOMs (before the file format suffix). Defaults to 'bom'
        outputName = "bom"

        // The file format generated, can be xml, json or all for generating both
        outputFormat = "all"

        // Exclude BOM Serial Number
        includeBomSerialNumber = false

    }

    jacoco {
        toolVersion = '0.8.12'
    }

    spotless {
        java {
            custom 'Remove commented-out import statements', {
                it.replaceAll(/\n\/\/ import .*?;.*/, '')
            }
            custom 'Refuse wildcard imports', {
                String errorMessage = "Do not use wildcard imports. 'spotlessApply' cannot resolve this issue."
                if (it =~ /\nimport .*\*;/) {
                    println(errorMessage) // Log the error message
                    throw new RuntimeException(errorMessage) // Throw a RuntimeException
                }
                return it
            }
            googleJavaFormat().aosp()
            formatAnnotations()
        }

        groovy {
            greclipse().configFile('../greclipse.properties')
            excludeJava()
        }

        groovyGradle {
            greclipse().configFile('../greclipse.properties')
        }
    }
}

ext.jacoco_excludes = [
        '**/e2e/**',
        '**/rs-e2e/**',
        '**/javalin/App*',
        '**/jackson/Jackson*',
        '**/slf4j/LocalLogger*',
        '**/slf4j/DeployedLogger*',
        '**/slf4j/LoggerHelper*',
        '**/jjwt/JjwtEngine*',
        '**/apache/ApacheClient*',
        '**/azure/AzureSecrets*',
        '**/database/EtorSqlDriverManager*',
        '**/azure/AzureClient*',
        '**/azure/AzureDatabaseCredentialsProvider*',
        '**/localfile/EnvironmentDatabaseCredentialsProvider*',
]

tasks.register('allUnitTests') {
    dependsOn 'app:test'
    dependsOn 'shared:test'
    dependsOn 'etor:test'
    dependsOn 'rs-e2e:test'
}

tasks.register('allBuilds') {
    dependsOn 'app:build'
    dependsOn 'shared:build'
    dependsOn 'etor:build'
}

sonar {
    properties {
        property "sonar.projectName", "Trusted Intermediary"
        property "sonar.projectKey", "trusted-intermediary"
        property "sonar.organization", "cdcgov"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "$projectDir.path/build/reports/jacoco/testCodeCoverageReport/testCodeCoverageReport.xml"
        property "sonar.coverage.exclusions", jacoco_excludes
    }
}
